name: Laravel Deploy

on:
  push:
    branches: [ "development" ]

jobs:
  create-deployment-artifacts:
    name: Create deployment artifacts
    runs-on: ubuntu-latest
    outputs:
      DEPLOYMENT_MATRIX: ${{ steps.export-deployment-matrix.outputs.DEPLOYMENT_MATRIX }}

    steps:
    - name: Extract branch name
      shell: bash
      run: echo "branch=$(echo ${GITHUB_REF#refs/heads/})" >>$GITHUB_OUTPUT
      id: extract_branch
        
    - name: Setup Environment (PR)  
      if: ${{ github.event_name == 'pull_request' }}  
      shell: bash  
      run: |  
          echo "LAST_COMMIT_SHA=${{ github.event.pull_request.head.sha }}" >> ${GITHUB_ENV}  
    - name: Setup Environment (Push)  
      if: ${{ github.event_name == 'push' }}  
      shell: bash  
      run: |  
        echo "LAST_COMMIT_SHA=${GITHUB_SHA}" >> ${GITHUB_ENV}
          
    - name: Set build tag
      shell: bash
      run: |
          echo "BUILD_TAG=${LAST_COMMIT_SHA:0:7}" >> $GITHUB_ENV

    - name: HTTP Request Action
      uses: fjogeleit/http-request-action@v1.14.0
      with:
        url: 'https://piatka.jetbrains.space/api/http/projects/key:MAIN/automation/deployments/start'
        method: 'POST'
        bearerToken: 'eyJhbGciOiJSUzUxMiJ9.eyJzdWIiOiJlNTQwZjNiZC0xMjk1LTQyM2EtOTg0My0yMTE5Yzk1ZTUxNzciLCJhdWQiOiJlNTQwZjNiZC0xMjk1LTQyM2EtOTg0My0yMTE5Yzk1ZTUxNzciLCJvcmdEb21haW4iOiJwaWF0a2EiLCJuYW1lIjoicGlhdGthLXNlcnZlciIsImlzcyI6Imh0dHBzOlwvXC9waWF0a2EuamV0YnJhaW5zLnNwYWNlIiwicGVybV90b2tlbiI6IjQwNGVsRjRnUFlTRCIsInByaW5jaXBhbF90eXBlIjoiU0VSVklDRSIsImlhdCI6MTY3OTc1NTg1MH0.BbltoSLvpyItNTrPXgGWPP_PDC3jdvY_SWtJTdyVNmI40u4LpKhvcKBVq1QFOkxtDdgTM7w1VH4o2Jk1raCSopo7iQLRLT3FkavcOYR2JGoo-WWP4MQNDRqkn1rSalgghVNY--M1v25a1LUw1j-SldO0fS4jEK0rdUn1x5ryxCk'
        customHeaders: '{"Content-Type": "application/json", "Accept": "application/json"}'
        data: '{"targetIdentifier": "${{ vars.REPO_NAME }}", "version": "${{ github.run_id }}", "commitRefs": [{"repositoryName": "${{ vars.REPO_NAME }}","branch": "${{ steps.extract_branch.outputs.branch }}", "commit": "${{ env.LAST_COMMIT_SHA }}"}]}'

    - uses: actions/checkout@v3
    
    - name: Compile CSS and Javascript
      run: |
        npm install
        npm run build
    - name: Compile CSS and Javascript
      run: |
        npm ci
        npm run build
  
    - name: Configure PHP 8.2
      uses: shivammathur/setup-php@master
      with:
        php-version: 8.2
        extensions: mbstring, ctype, fileinfo, openssl, PDO, bcmath, json, tokenizer, xml, mysqli, pdo_mysql


    - name: Composer install
      run: |
        composer install --no-dev --no-interaction --prefer-dist

    - name: Create deployment artifact
      env:
        GITHUB_SHA: ${{ github.sha }}
      run: tar -czf "${GITHUB_SHA}".tar.gz --exclude=*.git --exclude=node_modules *

    - name: Store artifact for distribution
      uses: actions/upload-artifact@v3
      with:
        name: app-build
        path: ${{ github.sha }}.tar.gz
    
    - name: Export deployment matrix
      id: export-deployment-matrix
      run: |
          delimiter="$(openssl rand -hex 8)"
          JSON="$(cat ./deployment-config.json)"
          echo "DEPLOYMENT_MATRIX<<${delimiter}" >> "${GITHUB_OUTPUT}"
          echo "$JSON" >> "${GITHUB_OUTPUT}"
          echo "${delimiter}" >> "${GITHUB_OUTPUT}"


  prepare-release-on-servers:
    name: "${{ matrix.server.name }}: Prepare release"
    runs-on: ubuntu-latest
    needs: create-deployment-artifacts
    strategy:
      matrix:
        server: ${{ fromJson(needs.create-deployment-artifacts.outputs.DEPLOYMENT_MATRIX) }}
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: app-build
      - name: Upload
        uses: appleboy/scp-action@master
        with:
          host: ${{ matrix.server.ip }}
          username: ${{ matrix.server.username }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ matrix.server.port }}
          source: ${{ github.sha }}.tar.gz
          target: ${{ matrix.server.path }}/artifacts
          
      - name: Extract archive and create directories
        uses: appleboy/ssh-action@master
        env:
          GITHUB_SHA: ${{ github.sha }}
        with:
          host: ${{ matrix.server.ip }}
          username: ${{ matrix.server.username }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ matrix.server.port }}
          envs: GITHUB_SHA
          script: |
            mkdir -p "${{ matrix.server.path }}/releases/${GITHUB_SHA}"
            tar xzf ${{ matrix.server.path }}/artifacts/${GITHUB_SHA}.tar.gz -C "${{ matrix.server.path }}/releases/${GITHUB_SHA}"
            rm -rf ${{ matrix.server.path }}/releases/${GITHUB_SHA}/storage
      
            mkdir -p ${{ matrix.server.path }}/storage/{app,public,framework,logs}
            mkdir -p ${{ matrix.server.path }}/storage/framework/{cache,sessions,testing,views}
            chmod -R 0777 ${{ matrix.server.path }}/storage

  run-before-hooks:
    name: "${{ matrix.server.name }}: Before hook"
    runs-on: ubuntu-latest
    needs: [ create-deployment-artifacts, prepare-release-on-servers ]
    strategy:
      matrix:
        server: ${{ fromJson(needs.create-deployment-artifacts.outputs.DEPLOYMENT_MATRIX) }}
    steps:
    - name: Run before hooks
      uses: appleboy/ssh-action@master
      env:
        GITHUB_SHA: ${{ github.sha }}
        RELEASE_PATH: ${{ matrix.server.path }}/releases/${{ github.sha }}
        ACTIVE_RELEASE_PATH: ${{ matrix.server.path }}/current
        STORAGE_PATH: ${{ matrix.server.path }}/storage
        BASE_PATH: ${{ matrix.server.path }}
      with:
        host: ${{ matrix.server.ip }}
        username: ${{ matrix.server.username }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        port: ${{ matrix.server.port }}
        envs: GITHUB_SHA,RELEASE_PATH,ACTIVE_RELEASE_PATH,STORAGE_PATH,BASE_PATH

  activate-release:
    name: "${{ matrix.server.name }}: Activate release"
    runs-on: ubuntu-latest
    needs: [ create-deployment-artifacts, prepare-release-on-servers, run-before-hooks ]
    strategy:
      matrix:
        server: ${{ fromJson(needs.create-deployment-artifacts.outputs.DEPLOYMENT_MATRIX) }}
    steps:
      - name: Activate release
        uses: appleboy/ssh-action@master
        env:
          GITHUB_SHA: ${{ github.sha }}
          RELEASE_PATH: ${{ matrix.server.path }}/releases/${{ github.sha }}
          ACTIVE_RELEASE_PATH: ${{ matrix.server.path }}/current
          STORAGE_PATH: ${{ matrix.server.path }}/storage
          BASE_PATH: ${{ matrix.server.path }}
          LARAVEL_ENV: ${{ secrets.LARAVEL_ENV }}
        with:
          host: ${{ matrix.server.ip }}
          username: ${{ matrix.server.username }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ matrix.server.port }}
          envs: GITHUB_SHA,RELEASE_PATH,ACTIVE_RELEASE_PATH,STORAGE_PATH,BASE_PATH,ENV_PATH,LARAVEL_ENV
          script: |
            ln -s ${BASE_PATH}/.env $RELEASE_PATH
            ln -s -f $STORAGE_PATH $RELEASE_PATH
            ln -s -n -f $RELEASE_PATH $ACTIVE_RELEASE_PATH
            # service php8.2-fpm reload

  run-after-hooks:
    name: "${{ matrix.server.name }}: After hook"
    runs-on: ubuntu-latest
    needs: [ create-deployment-artifacts, prepare-release-on-servers, run-before-hooks, activate-release ]
    strategy:
      matrix:
        server: ${{ fromJson(needs.create-deployment-artifacts.outputs.DEPLOYMENT_MATRIX) }}
    steps:
      - name: Run after hooks
        uses: appleboy/ssh-action@master
        env:
          GITHUB_SHA: ${{ github.sha }}
          RELEASE_PATH: ${{ matrix.server.path }}/releases/${{ github.sha }}
          ACTIVE_RELEASE_PATH: ${{ matrix.server.path }}/current
          STORAGE_PATH: ${{ matrix.server.path }}/storage
          BASE_PATH: ${{ matrix.server.path }}
        with:
          host: ${{ matrix.server.ip }}
          username: ${{ matrix.server.username }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ matrix.server.port }}
          envs: GITHUB_SHA,RELEASE_PATH,ACTIVE_RELEASE_PATH,STORAGE_PATH,BASE_PATH
          script: |
            ${{ matrix.server.afterHooks }}


  clean-up:
    name: "${{ matrix.server.name }}: Clean up"
    runs-on: ubuntu-latest
    needs: [ create-deployment-artifacts, prepare-release-on-servers, run-before-hooks, activate-release, run-after-hooks ]
    strategy:
      matrix:
        server: ${{ fromJson(needs.create-deployment-artifacts.outputs.DEPLOYMENT_MATRIX) }}
    steps:
      - name: Run after hooks
        uses: appleboy/ssh-action@master
        env:
          RELEASES_PATH: ${{ matrix.server.path }}/releases
          ARTIFACTS_PATH: ${{ matrix.server.path }}/artifacts
        with:
          host: ${{ matrix.server.ip }}
          username: ${{ matrix.server.username }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ matrix.server.port }}
          envs: RELEASES_PATH
          script: |
            cd $RELEASES_PATH && ls -t -1 | tail -n +6 | xargs rm -rf
            cd $ARTIFACTS_PATH && ls -t -1 | tail -n +6 | xargs rm -rf

      - name: Extract branch name
        shell: bash
        run: echo "branch=$(echo ${GITHUB_REF#refs/heads/})" >>$GITHUB_OUTPUT
        id: extract_branch
        
      - name: Setup Environment (PR)  
        if: ${{ github.event_name == 'pull_request' }}  
        shell: bash  
        run: |  
          echo "LAST_COMMIT_SHA=${{ github.event.pull_request.head.sha }}" >> ${GITHUB_ENV}  
      - name: Setup Environment (Push)  
        if: ${{ github.event_name == 'push' }}  
        shell: bash  
        run: |  
          echo "LAST_COMMIT_SHA=${GITHUB_SHA}" >> ${GITHUB_ENV}
          
      - name: Set build tag
        shell: bash
        run: |
          echo "BUILD_TAG=${LAST_COMMIT_SHA:0:7}" >> $GITHUB_ENV
          
      - name: HTTP Request Action
        uses: fjogeleit/http-request-action@v1.14.0
        with:
          url: 'https://piatka.jetbrains.space/api/http/projects/key:MAIN/automation/deployments/finish'
          method: 'POST'
          bearerToken: 'eyJhbGciOiJSUzUxMiJ9.eyJzdWIiOiJlNTQwZjNiZC0xMjk1LTQyM2EtOTg0My0yMTE5Yzk1ZTUxNzciLCJhdWQiOiJlNTQwZjNiZC0xMjk1LTQyM2EtOTg0My0yMTE5Yzk1ZTUxNzciLCJvcmdEb21haW4iOiJwaWF0a2EiLCJuYW1lIjoicGlhdGthLXNlcnZlciIsImlzcyI6Imh0dHBzOlwvXC9waWF0a2EuamV0YnJhaW5zLnNwYWNlIiwicGVybV90b2tlbiI6IjQwNGVsRjRnUFlTRCIsInByaW5jaXBhbF90eXBlIjoiU0VSVklDRSIsImlhdCI6MTY3OTc1NTg1MH0.BbltoSLvpyItNTrPXgGWPP_PDC3jdvY_SWtJTdyVNmI40u4LpKhvcKBVq1QFOkxtDdgTM7w1VH4o2Jk1raCSopo7iQLRLT3FkavcOYR2JGoo-WWP4MQNDRqkn1rSalgghVNY--M1v25a1LUw1j-SldO0fS4jEK0rdUn1x5ryxCk'
          customHeaders: '{"Content-Type": "application/json", "Accept": "application/json"}'
          data: '{"targetIdentifier": "${{ vars.REPO_NAME }}", "version": "${{ github.run_id }}", "commitRefs": [{"repositoryName": "${{ vars.REPO_NAME }}","branch": "${{ steps.extract_branch.outputs.branch }}", "commit": "${{ env.LAST_COMMIT_SHA }}"}]}'
      - name: Has failed
        if: ${{ failure() || cancelled() }}
        uses: fjogeleit/http-request-action@v1.14.0
        with:
          url: 'https://piatka.jetbrains.space/api/http/projects/key:MAIN/automation/deployments/fail'
          method: 'POST'
          bearerToken: 'eyJhbGciOiJSUzUxMiJ9.eyJzdWIiOiJlNTQwZjNiZC0xMjk1LTQyM2EtOTg0My0yMTE5Yzk1ZTUxNzciLCJhdWQiOiJlNTQwZjNiZC0xMjk1LTQyM2EtOTg0My0yMTE5Yzk1ZTUxNzciLCJvcmdEb21haW4iOiJwaWF0a2EiLCJuYW1lIjoicGlhdGthLXNlcnZlciIsImlzcyI6Imh0dHBzOlwvXC9waWF0a2EuamV0YnJhaW5zLnNwYWNlIiwicGVybV90b2tlbiI6IjQwNGVsRjRnUFlTRCIsInByaW5jaXBhbF90eXBlIjoiU0VSVklDRSIsImlhdCI6MTY3OTc1NTg1MH0.BbltoSLvpyItNTrPXgGWPP_PDC3jdvY_SWtJTdyVNmI40u4LpKhvcKBVq1QFOkxtDdgTM7w1VH4o2Jk1raCSopo7iQLRLT3FkavcOYR2JGoo-WWP4MQNDRqkn1rSalgghVNY--M1v25a1LUw1j-SldO0fS4jEK0rdUn1x5ryxCk'
          customHeaders: '{"Content-Type": "application/json", "Accept": "application/json"}'
          data: '{"targetIdentifier": "${{ vars.REPO_NAME }}", "version": "${{ github.run_id }}", "commitRefs": [{"repositoryName": "${{ vars.REPO_NAME }}","branch": "${{ steps.extract_branch.outputs.branch }}", "commit": "${{ env.LAST_COMMIT_SHA }}"}]}'
          
